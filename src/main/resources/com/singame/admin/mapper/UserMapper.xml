<?xml version="1.0" encoding="UTF-8" ?>
<!--
       Copyright 2015-2016 the original author or authors.
       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at
          http://www.apache.org/licenses/LICENSE-2.0
       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.
-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.singame.admin.mapper.UserMapper">
  <insert id="add" parameterType="User">
        INSERT INTO user
        (
          name,password,created_by,created_at,version
        )
        VALUES
        (
            #{name}, #{password}, #{createdBy}, #{createdAt}, 1
        )
  </insert>

  <update id="update" parameterType="User">
        UPDATE user
            SET name = #{name},
                password = #{password},
                created_by = #{createdBy},
                created_at = #{createdAt},
                version = version + 1
            WHERE
                removed_at IS NULL AND
                id = #{id} AND
                version = #{version}
  </update>

  <update id="delete" parameterType="User">
        UPDATE user
            SET removed_at = #{removedAt}
                removed_by = #{removedBy}
                version = version + 1
            WHERE
                removed_at IS NULL AND
                id = #{id} AND
                version = #{version}
  </update>

  <select id="getById" parameterType="Long" resultType="User">
        SELECT * FROM
            user
        WHERE
            removed_at IS NULL AND
            id = #{id}
  </select>


  <select id="getByName" parameterType="String" resultType="User">
        SELECT * FROM
            user
        WHERE
            removed_at IS NULL AND
            name = #{name}
  </select>

  <select id="list" parameterType="Query" resultType="User">
        SELECT * FROM
            user
        WHERE
            removed_at IS NULL
    <if test="filter.name != null and filter.name != ''">  
		        AND name like "%"#{filter.name}"%"
    </if>
    <if test="!sorters.isEmpty()">
        ORDER BY
      <foreach collection="list" item="sorters" open=" " close=" " separator=",">
                #{item.fieldName} #{item.sort}
      </foreach>
    </if>
        LIMIT #{offset},    <choose>
      <when test="size > 0">#{size}</when>
      <otherwise>20</otherwise>
    </choose>
  </select>
</mapper>